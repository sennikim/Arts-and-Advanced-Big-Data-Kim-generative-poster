# -*- coding: utf-8 -*-
"""Arts and Advanced Big Data-Kim-Week3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSx42A1Jpy5DfsaXeLrk_-sf340ywPO6

# Task 1
"""

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def random_palette(k=5):
    # Generate and return k random RGB colors as a list
    return [(random.random(), random.random(), random.random()) for _ in range(k)]

def blob(center=(0.5, 0.5), r=0.3, points=200, wobble=0.15):
    # Create a wobbly closed shape around a center point
    angles = np.linspace(0, 2*math.pi, points)  # Evenly spaced angles around a circle
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))  # Randomly adjust radius for wobbliness
    x = center[0] + radii * np.cos(angles)  # X coordinates of the shape
    y = center[1] + radii * np.sin(angles)  # Y coordinates of the shape
    return x, y  # Return the coordinates

random.seed()  # Reset seed so each run produces different results
plt.figure(figsize=(7,10))  # Set figure size
plt.axis('off')  # Hide axes and ticks

# Background color
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6)  # Generate 6 random colors
n_layers = 8  # Number of blobs to draw
for i in range(n_layers):
    cx, cy = random.random(), random.random()  # Random center position
    rr = random.uniform(0.15, 0.45)  # Random radius size
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.05,0.25))  # Create blob shape
    color = random.choice(palette)  # Pick a random color from the palette
    alpha = random.uniform(0.25, 0.6)  # Random transparency level
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))  # Draw filled shape

# Add text labels
plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Week 2 • Arts & Advanced Big Data", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)  # Set plot limits
plt.show()  # Show the figure

"""# Task 2 ver 1 : n_layers = 3, wobble 0.01-0.05, r = 0.15-0.45 (smaller)

"""

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def random_palette(k=5):
    return [(random.random(), random.random(), random.random()) for _ in range(k)]

def blob(center=(0.5, 0.5), r=0.3, points=200, wobble=0.05):
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

random.seed()
plt.figure(figsize=(7,10))
plt.axis('off')
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6)
n_layers = 3
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.15, 0.45)  # r: smaller
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.01,0.05))  # wobble: 0.01~0.05
    color = random.choice(palette)
    alpha = random.uniform(0.25, 0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Version 1: Few blobs, small wobble, r small/medium", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""# Task 2 ver2 : n_layers = 20, wobble 0.2-0.5, r = 0.25-0.6 (larger)"""

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def random_palette(k=5):
    return [(random.random(), random.random(), random.random()) for _ in range(k)]

def blob(center=(0.5, 0.5), r=0.5, points=200, wobble=0.3):
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

random.seed()
plt.figure(figsize=(7,10))
plt.axis('off')
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6)
n_layers = 20
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.25, 0.6)  # r: larger
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.2,0.5))  # wobble: 0.2~0.5 (큰 편)
    color = random.choice(palette)
    alpha = random.uniform(0.25, 0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Version 2: Many blobs, high wobble, r large", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""# Task 3 ver 1 : pastel"""

# Generative Abstract Poster - Pastel Version
# Concepts: randomness, lists, loops, functions, matplotlib

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def blob(center=(0.5, 0.5), r=0.3, points=200, wobble=0.15):
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

def random_palette(k=5, style="Pastel"):
    if style == "Pastel":
        base_colors = [(1.0,0.8,0.8),(1.0,0.9,0.7),(0.8,1.0,0.8),(0.7,0.9,1.0),(0.9,0.8,1.0)]
    else:
        base_colors = [(random.random(), random.random(), random.random()) for _ in range(k)]
    return random.choices(base_colors, k=k)  # allow repeated colors

random.seed()
plt.figure(figsize=(7,10))
plt.axis('off')
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6, style="Pastel")
n_layers = 8
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.15,0.45)
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.05,0.25))
    color = random.choice(palette)
    alpha = random.uniform(0.25,0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Style: Pastel", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""# Task 3 ver 2 : vivid"""

# Generative Abstract Poster - Vivid Version
# Concepts: randomness, lists, loops, functions, matplotlib

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def blob(center=(0.5,0.5), r=0.3, points=200, wobble=0.15):
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

def random_palette(k=5, style="Vivid"):
    if style == "Vivid":
        base_colors = [(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1)]
    else:
        base_colors = [(random.random(), random.random(), random.random()) for _ in range(k)]
    return random.choices(base_colors, k=k)

random.seed()
plt.figure(figsize=(7,10))
plt.axis('off')
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6, style="Vivid")
n_layers = 8
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.15,0.45)
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.05,0.25))
    color = random.choice(palette)
    alpha = random.uniform(0.25,0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Style: Vivid", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""# Task 3 ver 2 : monochrome blue"""

# Generative Abstract Poster - Monochrome Blue Version
# Concepts: randomness, lists, loops, functions, matplotlib

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def blob(center=(0.5,0.5), r=0.3, points=200, wobble=0.15):
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

def random_palette(k=5, style="Monochrome"):
    if style == "Monochrome":
        base_colors = [(0.2,0.4,1.0),(0.3,0.5,1.0),(0.4,0.6,1.0),(0.5,0.7,1.0),(0.6,0.8,1.0)]
    else:
        base_colors = [(random.random(), random.random(), random.random()) for _ in range(k)]
    return random.choices(base_colors, k=k)

random.seed()
plt.figure(figsize=(7,10))
plt.axis('off')
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6, style="Monochrome")
n_layers = 8
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.15,0.45)
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.05,0.25))
    color = random.choice(palette)
    alpha = random.uniform(0.25,0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Style: Monochrome Blue", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""# Task 4

"""

# Generative Abstract Poster - Step 4: Style Presets
# Concepts: randomness, lists, loops, functions, matplotlib

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def blob(center=(0.5,0.5), r=0.3, points=200, wobble=0.15):
    """Generate a wobbly closed shape around a center."""
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

def generate_poster(style="Pastel"):
    """Generate a generative poster with different style presets."""

    # Preset configurations
    presets = {
        "Minimal": {"n_layers": 5, "wobble_range": (0.02,0.1), "palette_style": "Pastel"},
        "Vivid": {"n_layers": 15, "wobble_range": (0.1,0.3), "palette_style": "Vivid"},
        "NoiseTouch": {"n_layers": 12, "wobble_range": (0.3,0.5), "palette_style": "Pastel"}
    }

    if style not in presets:
        print("Style not recognized. Using Minimal as default.")
        style = "Minimal"

    config = presets[style]

    # Define color palettes
    if config["palette_style"] == "Pastel":
        base_colors = [(1.0,0.8,0.8),(1.0,0.9,0.7),(0.8,1.0,0.8),(0.7,0.9,1.0),(0.9,0.8,1.0)]
    elif config["palette_style"] == "Vivid":
        base_colors = [(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1)]
    else:
        base_colors = [(0.2,0.4,1.0),(0.3,0.5,1.0),(0.4,0.6,1.0),(0.5,0.7,1.0),(0.6,0.8,1.0)]

    palette = random.choices(base_colors, k=6)

    # Create figure
    plt.figure(figsize=(7,10))
    plt.axis('off')
    plt.gca().set_facecolor((0.98,0.98,0.97))

    # Draw blobs
    for _ in range(config["n_layers"]):
        cx, cy = random.random(), random.random()
        rr = random.uniform(0.15,0.45)
        wobble = random.uniform(*config["wobble_range"])
        x, y = blob(center=(cx, cy), r=rr, wobble=wobble)
        color = random.choice(palette)
        alpha = random.uniform(0.25,0.6)
        plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

    # Add text labels
    plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
    plt.text(0.05, 0.91, f"Style: {style}", fontsize=11, transform=plt.gca().transAxes)

    plt.xlim(0,1); plt.ylim(0,1)
    plt.show()


# Generate posters in each style
generate_poster("Minimal")
generate_poster("Vivid")
generate_poster("NoiseTouch")

"""# Task 5

"""

# Generative Abstract Poster - Step 5: Reproducibility with Seed
import random
import math
import numpy as np
import matplotlib.pyplot as plt

def blob(center=(0.5,0.5), r=0.3, points=200, wobble=0.15):
    """Generate a wobbly closed shape around a center."""
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

def generate_poster(style="Pastel", seed=None):
    """Generate a generative poster with style presets and reproducibility via seed."""
    if seed is not None:
        random.seed(seed)
        np.random.seed(seed)  # Ensure numpy randomness is also reproducible

    presets = {
        "Minimal": {"n_layers": 5, "wobble_range": (0.02,0.1), "palette_style": "Pastel"},
        "Vivid": {"n_layers": 15, "wobble_range": (0.1,0.3), "palette_style": "Vivid"},
        "NoiseTouch": {"n_layers": 12, "wobble_range": (0.3,0.5), "palette_style": "Pastel"}
    }

    if style not in presets:
        print("Style not recognized. Using Minimal as default.")
        style = "Minimal"

    config = presets[style]

    # Define color palettes
    if config["palette_style"] == "Pastel":
        base_colors = [(1.0,0.8,0.8),(1.0,0.9,0.7),(0.8,1.0,0.8),(0.7,0.9,1.0),(0.9,0.8,1.0)]
    elif config["palette_style"] == "Vivid":
        base_colors = [(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1)]
    else:
        base_colors = [(0.2,0.4,1.0),(0.3,0.5,1.0),(0.4,0.6,1.0),(0.5,0.7,1.0),(0.6,0.8,1.0)]

    palette = random.choices(base_colors, k=6)

    # Create figure
    plt.figure(figsize=(7,10))
    plt.axis('off')
    plt.gca().set_facecolor((0.98,0.98,0.97))

    # Draw blobs
    for _ in range(config["n_layers"]):
        cx, cy = random.random(), random.random()
        rr = random.uniform(0.15,0.45)
        wobble = random.uniform(*config["wobble_range"])
        x, y = blob(center=(cx, cy), r=rr, wobble=wobble)
        color = random.choice(palette)
        alpha = random.uniform(0.25,0.6)
        plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

    # Add text labels
    plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
    plt.text(0.05, 0.91, f"Style: {style}, Seed: {seed}", fontsize=11, transform=plt.gca().transAxes)

    plt.xlim(0,1); plt.ylim(0,1)
    plt.show()


# --------------------------
# Example usage:

# Same seed twice → identical posters
generate_poster("Minimal", seed=42)
generate_poster("Minimal", seed=42)

# Different seeds → different results
generate_poster("Minimal", seed=101)
generate_poster("Minimal", seed=202)

"""# Task 6"""

# Generative Abstract Poster - Full Tasks with PNG saving
import os
import random
import math
import numpy as np
import matplotlib.pyplot as plt

# --------------------------
# Blob function
def blob(center=(0.5,0.5), r=0.3, points=200, wobble=0.15):
    """Generate a wobbly closed shape around a center."""
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

# --------------------------
# Generate poster function
def generate_poster(style="Pastel", seed=None, n_layers=None, wobble_range=None, r_range=(0.15,0.45), filename=None):
    """Generate a generative poster with presets, reproducibility, and optional saving."""

    # Set seeds
    if seed is not None:
        random.seed(seed)
        np.random.seed(seed)

    # Preset configurations
    presets = {
        "Minimal": {"n_layers": 5, "wobble_range": (0.02,0.1), "palette_style": "Pastel"},
        "Vivid": {"n_layers": 15, "wobble_range": (0.1,0.3), "palette_style": "Vivid"},
        "NoiseTouch": {"n_layers": 12, "wobble_range": (0.3,0.5), "palette_style": "Pastel"},
        "Pastel": {"n_layers": 8, "wobble_range": (0.05,0.25), "palette_style": "Pastel"},
        "VividColors": {"n_layers": 8, "wobble_range": (0.05,0.25), "palette_style": "Vivid"},
        "MonochromeBlue": {"n_layers": 8, "wobble_range": (0.05,0.25), "palette_style": "Monochrome"}
    }

    config = presets.get(style, presets["Pastel"])

    # Override with custom values
    if n_layers is not None:
        config["n_layers"] = n_layers
    if wobble_range is not None:
        config["wobble_range"] = wobble_range

    # Define color palettes
    if config["palette_style"] == "Pastel":
        base_colors = [(1.0,0.8,0.8),(1.0,0.9,0.7),(0.8,1.0,0.8),(0.7,0.9,1.0),(0.9,0.8,1.0)]
    elif config["palette_style"] == "Vivid":
        base_colors = [(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1)]
    else:  # Monochrome
        base_colors = [(0.2,0.4,1.0),(0.3,0.5,1.0),(0.4,0.6,1.0),(0.5,0.7,1.0),(0.6,0.8,1.0)]

    palette = random.choices(base_colors, k=6)

    # Create figure
    plt.figure(figsize=(7,10))
    plt.axis('off')
    plt.gca().set_facecolor((0.98,0.98,0.97))

    # Draw blobs
    for _ in range(config["n_layers"]):
        cx, cy = random.random(), random.random()
        rr = random.uniform(*r_range)
        wobble = random.uniform(*config["wobble_range"])
        x, y = blob(center=(cx, cy), r=rr, wobble=wobble)
        color = random.choice(palette)
        alpha = random.uniform(0.25,0.6)
        plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

    # Add text labels
    plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
    plt.text(0.05, 0.91, f"Style: {style}, Seed: {seed}", fontsize=11, transform=plt.gca().transAxes)

    plt.xlim(0,1); plt.ylim(0,1)

    # Save PNG if filename provided
    if filename:
        folder = os.path.dirname(filename)
        if folder:
            os.makedirs(folder, exist_ok=True)
        plt.savefig(filename, dpi=300)
        print(f"Saved poster as {filename}")

    plt.show()

# --------------------------
# Example Usage

# Task 2: Different n_layers & wobble
generate_poster(style="Pastel", n_layers=3, wobble_range=(0.01,0.05), r_range=(0.15,0.35), filename="posters/Task2_version1.png")
generate_poster(style="Pastel", n_layers=20, wobble_range=(0.2,0.5), r_range=(0.25,0.6), filename="posters/Task2_version2.png")

# Task 3: Different palettes
generate_poster(style="Pastel", filename="posters/Task3_Pastel.png")
generate_poster(style="VividColors", filename="posters/Task3_Vivid.png")
generate_poster(style="MonochromeBlue", filename="posters/Task3_Monochrome.png")

# Task 4: Preset styles
generate_poster(style="Minimal", filename="posters/Task4_Minimal.png")
generate_poster(style="Vivid", filename="posters/Task4_Vivid.png")
generate_poster(style="NoiseTouch", filename="posters/Task4_NoiseTouch.png")

# Task 5: Reproducibility with seeds
generate_poster(style="Minimal", seed=42, filename="posters/Task5_seed42_1.png")
generate_poster(style="Minimal", seed=42, filename="posters/Task5_seed42_2.png")
generate_poster(style="Minimal", seed=101, filename="posters/Task5_seed101.png")
generate_poster(style="Minimal", seed=202, filename="posters/Task5_seed202.png")