# -*- coding: utf-8 -*-
"""Arts and Advanced Big Data-Kim-Week4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eE9_6Scfr9crFCzFJrUbBWR8c2qgKtiy

# Part A
"""

import numpy as np
import matplotlib.pyplot as plt
import random
from ipywidgets import interact, FloatSlider, IntSlider, Button, HBox, VBox

# --- Parameters ---
layers = 3
wobble = 0.01
palette_index = 0
flowers = []

# --- 파스텔 색상 팔레트 ---
palettes = [
    ["#FFB3BA", "#FFDFBA", "#FFFFBA", "#BAFFC9", "#BAE1FF"],
    ["#F7C8E0", "#FFDDCC", "#FFE6EB", "#D6F5F5", "#C9E4FF"],
    ["#FDE2E4", "#FAD2E1", "#E2ECE9", "#BEE1E6", "#C6DEF1"],
]

# --- 꽃 패턴 생성 ---
def generate_flower(center=(0.5,0.5), petals=8, radius=0.2, points=50):
    curves = []
    angles = np.linspace(0, 2*np.pi, petals, endpoint=False)
    for a in angles:
        t = np.linspace(0,1,points)
        # 중심에서 불규칙하게 퍼지는 곡선
        x = center[0] + t * radius * np.cos(a) + np.random.normal(0, 0.01, size=points)
        y = center[1] + t * radius * np.sin(a) + np.random.normal(0, 0.01, size=points)
        curves.append((x, y))
    return curves

# 초기 꽃 하나
flowers.append(generate_flower())

# --- 그림 그리기 ---
def draw_poster(layers, wobble, palette_index):
    plt.figure(figsize=(6,6))
    colors = palettes[palette_index % len(palettes)]
    for flower in flowers:
        for x, y in flower:
            for l in range(layers):
                x_shifted = x + np.random.normal(0, wobble, size=len(x))
                y_shifted = y + np.random.normal(0, wobble, size=len(y))
                plt.plot(
                    x_shifted, y_shifted,
                    color=random.choice(colors),
                    linewidth=3 + (layers - l),
                    alpha=0.6,
                    solid_capstyle='round'
                )
    plt.xlim(0,1)
    plt.ylim(0,1)
    plt.axis('off')
    plt.title(f"🌸 Spring Abstract | Layers: {layers}, Wobble: {wobble:.3f}, Palette: {palette_index}")
    plt.show()

# --- 새 꽃 추가 ---
def add_flower(x, y):
    flowers.append(generate_flower(center=(x, y), petals=random.randint(5,12), radius=random.uniform(0.1,0.25)))
    draw_poster(s_layers.value, s_wobble.value, s_palette.value)

# --- 슬라이더 생성 ---
s_layers = IntSlider(value=3, min=1, max=8, description='Layers')
s_wobble = FloatSlider(value=0.01, min=0.0, max=0.05, step=0.005, description='Wobble')
s_palette = IntSlider(value=0, min=0, max=len(palettes)-1, description='Palette')
s_x = FloatSlider(value=0.5, min=0.0, max=1.0, step=0.01, description='X')
s_y = FloatSlider(value=0.5, min=0.0, max=1.0, step=0.01, description='Y')
btn = Button(description='Add Flower')

btn.on_click(lambda b: add_flower(s_x.value, s_y.value))

# --- 인터랙티브 실행 ---
ui = VBox([HBox([s_layers, s_wobble, s_palette]), HBox([s_x, s_y, btn])])
interact(draw_poster, layers=s_layers, wobble=s_wobble, palette_index=s_palette)
display(ui)

"""# Part B"""

import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, IntSlider, FloatSlider, Button, HBox, VBox
import random

# --- Parameters ---
layers = 5
shadow_offset = 0.02
palette_index = 0
spheres = []

# --- 팔레트 (알록달록 후르츠링 느낌) ---
palettes = [
    ["#FF4C4C", "#FFD93D", "#6BCB77", "#4D96FF", "#FF6F91"],  # bright pastel
    ["#FFB3BA", "#FFDFBA", "#FFFFBA", "#BAFFC9", "#BAE1FF"],  # soft pastel
]

# --- 구체 생성 ---
def generate_sphere(center=(0.5,0.5), radius=0.05, points=100):
    t = np.linspace(0, 2*np.pi, points)
    x = center[0] + radius * np.cos(t)
    y = center[1] + radius * np.sin(t)
    return x, y

# 초기 구체 하나
spheres.append(generate_sphere())

# --- 그림 그리기 ---
def draw_poster(layers, shadow_offset, palette_index):
    plt.figure(figsize=(6,6))
    colors = palettes[palette_index % len(palettes)]

    for x, y in spheres:
        for l in range(layers):
            # 그림자 효과
            x_shadow = x + shadow_offset*(layers-l)
            y_shadow = y - shadow_offset*(layers-l)
            plt.fill(x_shadow, y_shadow, color='gray', alpha=0.2)

            # 메인 구체
            plt.fill(x, y, color=random.choice(colors), alpha=0.9)

    plt.xlim(0,1)
    plt.ylim(0,1)
    plt.axis('off')
    plt.title(f"🍓 Fruity 3D Poster | Layers: {layers}, Shadow: {shadow_offset}, Palette: {palette_index}")
    plt.show()

# --- 새 구체 추가 ---
def add_sphere(x, y, radius):
    spheres.append(generate_sphere(center=(x, y), radius=radius))
    draw_poster(sl_layers.value, sl_shadow.value, sl_palette.value)

# --- 슬라이더 생성 ---
sl_layers = IntSlider(value=5, min=1, max=10, description='Layers')
sl_shadow = FloatSlider(value=0.02, min=0.0, max=0.05, step=0.005, description='Shadow')
sl_palette = IntSlider(value=0, min=0, max=len(palettes)-1, description='Palette')
sl_x = FloatSlider(value=0.5, min=0.0, max=1.0, step=0.01, description='X')
sl_y = FloatSlider(value=0.5, min=0.0, max=1.0, step=0.01, description='Y')
sl_radius = FloatSlider(value=0.05, min=0.01, max=0.1, step=0.005, description='Radius')
btn_add = Button(description='Add Sphere')

btn_add.on_click(lambda b: add_sphere(sl_x.value, sl_y.value, sl_radius.value))

# --- 인터랙티브 실행 ---
ui = VBox([HBox([sl_layers, sl_shadow, sl_palette]), HBox([sl_x, sl_y, sl_radius, btn_add])])
interact(draw_poster, layers=sl_layers, shadow_offset=sl_shadow, palette_index=sl_palette)
display(ui)